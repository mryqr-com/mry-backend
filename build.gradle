buildscript {
    repositories {
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.16.11"
        classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.13"
    }
}

plugins {
    id 'application'
    id "org.springframework.boot" version "3.0.0"
    id "io.gatling.gradle" version "3.8.4"
}

repositories {
    maven { url "https://maven.aliyun.com/repository/central" }
}

wrapper {
    gradleVersion = '7.6'
}

application {
    mainClass = "com.mryqr.MryApplication"
    applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]
}

archivesBaseName = 'mry-backend'
sourceCompatibility = 17
targetCompatibility = 17

sourceSets {
    apiTest {
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

configurations {
    apiTestImplementation.extendsFrom testImplementation
    apiTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task apiTest(type: Test) {
    description = 'Run API tests.'
    group = 'verification'
    testClassesDirs = sourceSets.apiTest.output.classesDirs
    classpath = sourceSets.apiTest.runtimeClasspath
    shouldRunAfter test
}

configurations.all {
    exclude group: "junit", module: "junit"
    exclude group: "org.assertj", module: "assertj-core"
    exclude group: "org.junit.vintage", module: "junit-vintage-engine"
}

tasks.withType(Test) {
    useJUnitPlatform()
}

check.dependsOn apiTest

bootJar {
    launchScript()
}

dependencies {
    configurations {
        parentBom
        runtimeOnly.extendsFrom(parentBom)
        compileOnly.extendsFrom(parentBom)
        annotationProcessor.extendsFrom(parentBom)
        implementation.extendsFrom(parentBom)
    }

    parentBom platform('org.springframework.boot:spring-boot-dependencies:3.0.0')

    //spring
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-aop')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-mail')
    implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    implementation('org.springframework.boot:spring-boot-starter-data-redis')
    implementation('org.springframework.retry:spring-retry')
    implementation('io.micrometer:micrometer-tracing-bridge-otel:1.0.0')

    //jackson
    implementation('com.fasterxml.jackson.module:jackson-module-parameter-names:2.14.1')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.14.1')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.1')
    implementation('com.fasterxml.jackson.core:jackson-core:2.14.1')
    implementation('com.fasterxml.jackson.core:jackson-databind:2.14.1')
    implementation('com.fasterxml.jackson.core:jackson-annotations:2.14.1')

    //alibaba
    implementation('com.aliyun:aliyun-java-sdk-core:4.6.3')
    implementation('com.aliyun:aliyun-java-sdk-sts:3.1.0')
    implementation('com.aliyun:aliyun-java-sdk-alidns:3.0.1')
    implementation('com.aliyun:aliyun-java-sdk-dysmsapi:2.2.1')
    implementation('com.alibaba:easyexcel:3.1.3')
    implementation('com.google.protobuf:protobuf-java:3.21.11')
    implementation('com.aliyun.openservices:aliyun-log-logback-appender:0.1.19')

    //others
    implementation('io.jsonwebtoken:jjwt:0.9.1')
    implementation('com.google.guava:guava:31.1-jre')
    implementation('commons-io:commons-io:2.11.0')
    implementation('org.apache.commons:commons-lang3')
    implementation('org.apache.commons:commons-collections4:4.4')
    implementation('net.javacrumbs.shedlock:shedlock-spring:4.40.0')
    implementation('net.javacrumbs.shedlock:shedlock-provider-mongo:4.40.0')
    implementation('org.ansj:ansj_seg:5.1.6')
    implementation('com.github.wechatpay-apiv3:wechatpay-java:0.2.6')

    //test
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("io.rest-assured:spring-mock-mvc")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation('org.junit.jupiter:junit-jupiter-params')
    testImplementation('org.junit.jupiter:junit-jupiter-engine')
    testImplementation('org.mockito:mockito-core:4.9.0')
    testImplementation('org.mockito:mockito-junit-jupiter:4.9.0')
    testImplementation('com.apifan.common:common-random:1.0.18')
    testImplementation('org.apache.commons:commons-pool2:2.11.1')

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

gatling {
    // WARNING: options below only work when logback config file isn't provided
    logLevel = 'WARN' // logback root level
    logHttp = 'NONE' // set to 'ALL' for all HTTP traffic in TRACE, 'FAILURES' for failed HTTP traffic in DEBUG
}

apply from: "${rootProject.projectDir}/gradle/idea.gradle"
apply from: "${rootProject.projectDir}/gradle/docker-compose/docker-compose.gradle"
apply from: "${rootProject.projectDir}/gradle/spotbugs/spotbugs.gradle"
apply from: "${rootProject.projectDir}/gradle/checkstyle/checkstyle.gradle"
apply from: "${rootProject.projectDir}/gradle/version-info.gradle"
apply from: "${rootProject.projectDir}/gradle/jacoco.gradle"
